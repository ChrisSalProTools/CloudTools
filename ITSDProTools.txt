
Remove-Variable * -ErrorAction SilentlyContinue
$ProGressPreference = 'SilentlyContinue'
Add-Type -AssemblyName presentationframework
Add-Type -AssemblyName presentationcore

$compactmodepref = Get-content $env:userprofile\AppData\Local\CloudTools\mode.txt

if($compactmodepref -eq 1){
$xmlurl = "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/compact.txt"
}else{
$xmlurl = "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/full.txt"
}

$itsdform = @{}
$xmlfile = Invoke-webrequest "$xmlurl" -usebasicparsing
$xmlfile = $xmlfile.content
$BackgroundColorChoice = get-content $env:userprofile\AppData\Local\CloudTools\Background.txt
$ButtonColorChoice = get-content $env:userprofile\AppData\Local\CloudTools\Button.txt
$BackgroundText = get-content $env:userprofile\AppData\Local\CloudTools\BackgroundText.txt
$ButtonText = get-content $env:userprofile\AppData\Local\CloudTools\ButtonText.txt
$xmlfile = $xmlfile -replace "BackgroundColorVar","$BackgroundColorChoice"
$xmlfile = $xmlfile -replace "ButtonColorVar","$ButtonColorChoice"
$xmlfile = $xmlfile -replace "BackgroundTextVar","$BackgroundText"
$xmlfile = $xmlfile -replace "ButtonTextVar","$ButtonText"
$xmlfileclean = $xmlfile -replace 'mc:Ignorable="d"','' -replace "x:N",'N' -replace 'x:Class=".*?"','' -replace 'd:DesignHeight="\d*?"','' -replace 'd:Designwidth="\d*?"',''
[xml]$xmlfile = $xmlfileclean
$reader = new-object System.Xml.XmlNodeReader $xmlfile
$tempform = [windows.markup.xamlreader]::Load($reader)
$NamedObjects = $xmlfile.selectnodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]")
$namedobjects | foreach-object {

$itsdform.Add($_.Name, $tempform.FindName($_.Name))

}
#Entire Script goes below - everything above is used to pull the GUI and make it readable
#===================================================================================

function startlinksFree(){
$ifexist = get-content "$env:userprofile\AppData\Local\CloudTools\startlinks"
if($ifexist -ne $null){
$timedout = 0
do{
if($timedout -ge 15){
$null | out-file $env:userprofile\appdata\local\cloudtools\startlinks
}
start-sleep -seconds 1
$ifexist = get-content "$env:userprofile\AppData\Local\CloudTools\startlinks"
$timedout++
}while($ifexist -ne $null)
}}

# the following module is a failsafe if someone enters an incorrect color - this will relaunch the tool with the colors reset
$testlaunch = $itsdform | out-string
$testlaunch = $testlaunch | select-string "Name"
if ($testlaunch -eq $null){
"#FF205D80" > $env:userprofile\AppData\Local\CloudTools\Background.txt
"#FFFFFF" > $env:userprofile\AppData\Local\CloudTools\Button.txt
"white" > $env:userprofile\AppData\Local\CloudTools\BackgroundText.txt
"#000000" > $env:userprofile\AppData\Local\CloudTools\ButtonText.txt
"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" > "$env:userprofile\AppData\Local\CloudTools\startlinks"
start-process "$env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleHidden.exe"
exit
}

# Code that is executed when the Search button is clicked

$itsdform.searchButton.add_Click({
})

$itsdform.BsamButton.add_Click({

startlinksFree

"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/addnote.txt" > "$env:userprofile\AppData\Local\CloudTools\startlinks"

start-process $env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleHidden.exe
})

$itsdform.PermissionsButton.add_Click({
$chtrdc = get-content $env:userprofile\AppData\Local\CloudTools\chtrdc.txt
remove-item "$env:userprofile\Downloads\index.html"; 
$User = $itsdform.inputBox.text
$itsdform.inputBox.text = ""
$Permissions = get-content $env:userprofile\AppData\Local\CloudTools\permissions.txt
$Member = get-aduser $User -server $chtrdc -properties * | select-object -expandproperty memberof
$mod = 0
$Member | foreach-object {
$Member[$mod] = $Member[$mod] | out-string
$Member[$mod] = $Member[$mod].split("=")
$Member[$mod] = $Member[$mod].split(",")
$Member[$mod] = $Member[$mod][1]
$mod++
}
$VpnMember = $Member | select-string -Pattern $Permissions
$html = $VpnMember | ForEach-Object {
$_,'<br>'
}
$MemberFormat = $Member | ForEach-Object {
    $_,'<br>'
}
$template = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/template.txt" -usebasicparsing
$template = $template.content
add-content "$env:userprofile\Downloads\index.html" "$template"; Add-content "$env:userprofile\Downloads\index.html" "$html"; Add-content "$env:userprofile\Downloads\index.html" "</p><p>All of the permissions on the account:<br><br> $MemberFormat"; Add-content "$env:userprofile\Downloads\index.html" "</p></div></body></html>"; start-sleep -seconds 1; start-process "$env:userprofile\Downloads\index.html"; $html = ""; $VpnMember = ""
})

$itsdform.VerifyButton.add_Click({
$UsrInput = $itsdform.inputBox.text

startlinksFree

$UsrInput > $env:userprofile\AppData\Local\CloudTools\outfile.txt
"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/verify.txt" > "$env:userprofile\AppData\Local\CloudTools\startlinks"
start-process $env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleVisible.exe
$itsdform.inputBox.text = ""
})

$itsdform.PWButton.add_Click({
})

$itsdform.LockoutButton.add_Click({
# this has been repurposed as the backup ticket form

startlinksFree
"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/BackupTicketMain" > "$env:userprofile\AppData\Local\CloudTools\startlinks"
start-process $env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleHidden.exe
})

$itsdform.CMSButton.add_Click({
})

$itsdform.ADMButton.add_Click({
})

$itsdform.SettingsButton.add_Click({

startlinksFree

"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/settings.txt" > "$env:userprofile\AppData\Local\CloudTools\startlinks"
start-process -wait $env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleHidden.exe

startlinksFree

"https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" > "$env:userprofile\AppData\Local\CloudTools\startlinks"
start-process $env:userprofile\AppData\Local\CloudTools\Key\KeyConsoleHidden.exe
exit
})

#======================================================================================
#OnTop
$ontop = get-content $env:userprofile\AppData\Local\CloudTools\ontop.txt

if ($ontop -eq 1){
$itsdform.ProToolsWindow.topmost="True"
}

$itsdform.ProToolsWindow.ShowDialog() | out-null
