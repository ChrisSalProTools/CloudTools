#
# this file is created to check if ITSDProTools is installed on your system. If not, it will create the necissary files for the program to run. If files are already present, it will simply launch the tool

# test if connectivity exists to internal network

Do{
$connected = ping corp.chartercom.com -n 1
$connected = $connected | out-string
if($connected.contains("Reply") -eq $false){
write-output "Active Directory not reachable yet. Retrying in 10 seconds..."
start-sleep -seconds 10
}
}while($connected.contains("Reply") -eq $false)
write-output "Connection established..."

if (Test-Path "$env:userprofile\Appdata\local\CloudTools"){
write-output "ITSDProTools installed."
Write-output "Launching..."
start-process powershell.exe -windowstyle hidden -argumentlist '$run = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" -usebasicparsing; $run = $run.content; Invoke-Expression $run'
start-process powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/chtrsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen'
start-process powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/twcsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen'
}else{
# this code is for when the above test-path fails - meaning the tool is not installed and no config files exist
Write-output "ITSDProTools not installed."
Write-output "Generating config files..."
mkdir $env:userprofile\Appdata\local\CloudTools | out-null
"#FF205D80" | out-file "$env:userprofile\Appdata\local\CloudTools\Background.txt"                                               # config file for background color
"white" | out-file "$env:userprofile\Appdata\local\CloudTools\Button.txt"                                                       # config file for button color
"#000000" | out-file "$env:userprofile\Appdata\local\CloudTools\ButtonText.txt"                                                 # config file for button text color
"white" | out-file "$env:userprofile\Appdata\local\CloudTools\BackgroundText.txt"                                               # config file for bacground text color
0 | out-file "$env:userprofile\AppData\Local\CloudTools\ontop.txt"                                                              # config file for always on top
0 | out-file "$env:userprofile\AppData\Local\CloudTools\mode.txt"                                                               # config file for compact vs full mode
"Your personal notes page" | out-file "$env:userprofile\Appdata\local\CloudTools\notes.txt"                                     # initial creation of notes page
"$env:userprofile\Appdata\local\CloudTools\notes.txt" | out-file "$env:userprofile\Appdata\local\CloudTools\location.txt"       # location of notes page initilized

# hard coded path must exist for desktop shortcut to work properly
mkdir C:\ITSDProTools\CloudTools

# download icon
Invoke-WebRequest -Uri "https://github.com/ChrisSalProTools/CloudTools/blob/main/ITSDIcon.ico?raw=true" -outfile C:\ITSDProTools\CloudTools\ITSDProTools.ico

# create launcher script
$launch = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/launcher.txt" -UseBasicParsing; $launch = $launch.content; $launch | out-file C:\ITSDProTools\CloudTools\launcher.ps1

# download shortcut
Invoke-WebRequest -Uri "https://github.com/ChrisSalProTools/CloudTools/blob/main/ITSD%20Pro%20Tools%20(Cloud).lnk?raw=true" -outfile C:\ITSDProTools\CloudTools\ITSDProTools.lnk

# copy to desktop
$DesktopPath = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
copy-item 'C:\ITSDProTools\CloudTools\ITSD Pro Tools (Cloud).lnk' $DesktopPath

# this section handles the creation of the server list
Write-output "Generating CHTR server list..."
start-process -wait powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/chtrsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen; exit'
write-output "CHTR server list created"
write-output "Generating TWC server list..."
start-process -wait powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/twcsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen; exit'
Write-output "Finished!"
Write-output "Launching..."
start-process powershell.exe -windowstyle hidden -argumentlist '$run = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" -usebasicparsing; $run = $run.content; Invoke-Expression $run'
}

exit
