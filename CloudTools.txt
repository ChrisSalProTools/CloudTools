#
# this file is created to check if ITSDProTools is installed on your system. If not, it will create the necissary files for the program to run. If files are already present, it will simply launch the tool

# test if connectivity exists to internal network

# I don't want you to be able to see all the web requests being pulled - it just looks nicer if it looks like it's doing everything by magic :) 
$ProGressPreference = 'SilentlyContinue'

Do{
$connected = ping corp.chartercom.com -n 1
$connected = $connected | out-string
if($connected.contains("Reply") -eq $false){
write-output "Active Directory not reachable yet. Retrying in 10 seconds..."
ipconfig /flushdns | out-null
start-sleep -seconds 10
}
}while($connected.contains("Reply") -eq $false)
write-output "Connection established..."

if (Test-Path "$env:userprofile\Appdata\local\CloudTools"){
start-process powershell.exe -windowstyle hidden -argumentlist '$run = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" -usebasicparsing; $run = $run.content; Invoke-Expression $run'
start-process powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/chtrsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen'
start-process powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/twcsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen'
write-output ""
start-sleep -milliseconds 75
write-output "________   ___        _________   ___   ___   ______     "
start-sleep -milliseconds 75
write-output "|  ____|   | |        | _____ |   | |   | |   | ___ \    "
start-sleep -milliseconds 75
write-output "| |        | |        | |   | |   | |   | |   | |  \ \   "
start-sleep -milliseconds 75
write-output "| |        | |        | |   | |   | |   | |   | |   \ \  "
start-sleep -milliseconds 75
write-output "| |        | |        | |   | |   | |   | |   | |   | |  "
start-sleep -milliseconds 75
write-output "| |        | |        | |   | |   | |   | |   | |  / /   "
start-sleep -milliseconds 75
write-output "| |_____   | |____    | |___| |   | |___| |   | | / /    "
start-sleep -milliseconds 75
write-output "|______|   |______|   |_______|   |_______|   |____/     " 
start-sleep -milliseconds 75

write-output "_______________   _________   _________   ___        _________ "
start-sleep -milliseconds 75
write-output "|_____   _____|   | _____ |   | _____ |   | |        |  _____| "
start-sleep -milliseconds 75
write-output "      | |         | |   | |   | |   | |   | |        | |       "
start-sleep -milliseconds 75
write-output "      | |         | |   | |   | |   | |   | |        | |____   "
start-sleep -milliseconds 75
write-output "      | |         | |   | |   | |   | |   | |        |____  |  "
start-sleep -milliseconds 75
write-output "      | |         | |   | |   | |   | |   | |             | |  "
start-sleep -milliseconds 75
write-output "      | |         | |___| |   | |___| |   | |____    _____| |  "
start-sleep -milliseconds 75
write-output "      |_|         |_______|   |_______|   |______|   |______|  "
start-sleep -milliseconds 75
write-output "By Chris Saladin"
start-sleep -seconds 2
}else{
# this code is for when the above test-path fails - meaning the tool is not installed and no config files exist
Write-output "ITSDProTools not installed."
Write-output "Generating config files..."
mkdir $env:userprofile\Appdata\local\CloudTools | out-null                                                                      # main folder to house appdata files in
mkdir $env:userprofile\Appdata\local\CloudTools\SavedTickets | out-null                                                         # folder to house working tickets in
mkdir $env:userprofile\Appdata\local\CloudTools\SavedTickets\Archived | out-null                                                # folder to house archived tickets in
"#FF205D80" | out-file "$env:userprofile\Appdata\local\CloudTools\Background.txt"                                               # config file for background color
"white" | out-file "$env:userprofile\Appdata\local\CloudTools\Button.txt"                                                       # config file for button color
"#000000" | out-file "$env:userprofile\Appdata\local\CloudTools\ButtonText.txt"                                                 # config file for button text color
"white" | out-file "$env:userprofile\Appdata\local\CloudTools\BackgroundText.txt"                                               # config file for bacground text color
0 | out-file "$env:userprofile\AppData\Local\CloudTools\ontop.txt"                                                              # config file for always on top
0 | out-file "$env:userprofile\AppData\Local\CloudTools\mode.txt"                                                               # config file for compact vs full mode
"Your personal notes page" | out-file "$env:userprofile\Appdata\local\CloudTools\notes.txt"                                     # initial creation of notes page
"$env:userprofile\Appdata\local\CloudTools\notes.txt" | out-file "$env:userprofile\Appdata\local\CloudTools\location.txt"       # location of notes page initilized
                                                                                                                                # User Added Classifications
"Security,Password Reset,Active Directory Lockout,IT Support Desk,AD Lockout," > "$env:userprofile\AppData\Local\CloudTools\AddedClassifications.txt"

# template files need to be initilized so they can be pulled

(invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/CustomTemplate1.txt" -usebasicparsing).content > $env:userprofile\AppData\Local\CloudTools\CustomTemplate1.txt
(invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/CustomTemplate2.txt" -usebasicparsing).content > $env:userprofile\AppData\Local\CloudTools\CustomTemplate2.txt
(invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/CustomTemplate3.txt" -usebasicparsing).content > $env:userprofile\AppData\Local\CloudTools\CustomTemplate3.txt

"AP-VPN" > "$env:userprofile\Appdata\local\CloudTools\permissions.txt"
"AP-VPN-FieldOps-Employees" >> "$env:userprofile\Appdata\local\CloudTools\permissions.txt"
"AP-VPN-FieldOps-Contractors" >> "$env:userprofile\Appdata\local\CloudTools\permissions.txt"
"RG-VPN" >> "$env:userprofile\Appdata\local\CloudTools\permissions.txt"
"RG-NACVPN" >> "$env:userprofile\Appdata\local\CloudTools\permissions.txt"

# to copy to desktop, this must be run from the folder where it's being copied from. 
cd $env:userprofile\AppData\Local\CloudTools

# download icon
Invoke-WebRequest -Uri "https://github.com/ChrisSalProTools/CloudTools/blob/main/ITSDIcon.ico?raw=true" -outfile "$env:userprofile\appdata\local\CloudTools\ITSDProTools.ico"

# download shortcut
Invoke-WebRequest -Uri "https://github.com/ChrisSalProTools/CloudTools/blob/main/ITSDProTools.lnk?raw=true" -outfile "$env:userprofile\AppData\local\CloudTools\ITSD Pro Tools (Cloud).lnk"

# copy to desktop
$DesktopPath = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
copy-item "$env:userprofile\AppData\local\CloudTools\ITSD Pro Tools (Cloud).lnk" $DesktopPath

# this section handles the creation of the server list
Write-output "Generating CHTR server list..."
start-process -wait powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/chtrsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen; exit'
write-output "CHTR server list created"
write-output "Generating TWC server list..."
start-process -wait powershell.exe -windowstyle hidden -argumentlist '$gen = Invoke-WebRequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/twcsrv.txt" -usebasicparsing; $gen = $gen.content; Invoke-Expression $gen; exit'
Write-output "Finished!"
Write-output "Launching..."
start-process powershell.exe -windowstyle hidden -argumentlist '$run = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/ITSDProTools.txt" -usebasicparsing; $run = $run.content; Invoke-Expression $run'
}

exit
