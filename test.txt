function Add-ControlVariables() {
	
New-Variable -Name 'NewTicket' -Value $window.FindName('NewTicket') -Scope 1 -Force	
New-Variable -Name 'ReadButton' -Value $window.FindName('ReadButton') -Scope 1 -Force	
New-Variable -Name 'SaveButton' -Value $window.FindName('SaveButton') -Scope 1 -Force	
}

[System.Reflection.Assembly]::LoadWithPartialName("PresentationFramework") | Out-Null

function Import-Xaml {
	$BackgroundColorChoice = Get-Content C:\ITSDProToolsData\ScriptFiles\Background.txt
	$ButtonColorChoice = Get-Content C:\ITSDProToolsData\ScriptFiles\Button.txt
	$xaml = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/WpfWindow1.txt" -usebasicparsing
	$xaml = $xaml.content
	$xaml = $xaml -replace "BackgroundColorVar","$BackgroundColorChoice"
	$xaml = $xaml -replace "ButtonColorVar","$ButtonColorChoice"
	[xml]$xaml = $xaml
	$manager = New-Object System.Xml.XmlNamespaceManager -ArgumentList $xaml.NameTable
	$manager.AddNamespace("x", "http://schemas.microsoft.com/winfx/2006/xaml");
	$xaml.SelectNodes("//*[@x:Name='NewTicket']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='ReadButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='SaveButton']", $manager)[0].RemoveAttribute('Click')
	$xamlReader = New-Object System.Xml.XmlNodeReader $xaml
	[Windows.Markup.XamlReader]::Load($xamlReader)
}

function Set-EventHandler {

	$NewTicket.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		NewTicket -sender $sender -e $e
	})
	$ReadButton.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		ReadTickets -sender $sender -e $e
	})
	$SaveButton.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		SaveCSV -sender $sender -e $e
	})
}

$window = Import-Xaml





Add-ControlVariables
Set-EventHandler

function NewTicket
{
	param($sender, $e)
	# code that will execute when the "new ticket" button is pressed
	Start-Process Powershell.exe -WindowStyle hidden C:\ITSDProTools\ScriptFiles\BackupTicketForm\Ticket\launcher.ps1

}


function ReadTickets
{
	param($sender, $e)
	# code that will execute when the "read tickets" button is pressed
	Start-Process Powershell.exe -WindowStyle hidden C:\ITSDProTools\ScriptFiles\BackupTicketForm\Ticket\Reader\launcher.ps1
}


function SaveCSV
{
	param($sender, $e)
	# code that will execute when the "save CSV" button is pressed
	$timestamp = Get-Date -Format "MMddyyyy-HHmmss"; $timestamp = $timestamp + ".csv"
	rename-item -path "C:\ITSDProToolsData\SavedTickets\workingTickets.csv" -NewName $timestamp
	Move-Item "C:\ITSDProToolsData\SavedTickets\$timestamp" "C:\ITSDProToolsData\SavedTickets\Archived"
	

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$Form = New-Object System.Windows.Forms.Form
$Form.Text = 'CSV saved!'
$Form.Size = New-Object System.Drawing.Size(800,300)
$Form.StartPosition = 'CenterScreen'

$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(5,5)
$label.Size = New-Object System.Drawing.Size(800,70)
$label.Text = "Your CSV was saved to `r`nC:\ITSDProToolsData\SavedTickets\Archived\$timestamp"
$label.font = New-Object System.Drawing.Font("Arial",14,[System.Drawing.Fontstyle]::regular)
$form.Controls.Add($label)

$okButton = New-Object System.Windows.Forms.Button
$okButton.Location = New-Object System.Drawing.Point(5,90)
$okButton.Size = New-Object System.Drawing.Size(75,25)
$okButton.Text = 'OK'
$okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
$form.AcceptButton = $okButton
$form.controls.add($okbutton)

$form.Topmost = $true
$form.ShowIcon=$False
$Result = $form.ShowDialog()
}

$ontop = get-content C:\ITSDProToolsData\ScriptFiles\ontop.txt

if ($ontop -eq 1){
$window.topmost="True"
}

$window.ShowDialog()
