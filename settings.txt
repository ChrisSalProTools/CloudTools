#
function Add-ControlVariables {
	
New-Variable -Name 'OnTopCheckBox' -Value $window.FindName('OnTopCheckBox') -Scope 1 -Force	
New-Variable -Name 'CompactModeCheckBox' -Value $window.FindName('CompactModeCheckBox') -Scope 1 -Force	
New-Variable -Name 'OpenOnStartupCheckBox' -Value $window.FindName('OpenOnStartupCheckBox') -Scope 1 -Force
New-Variable -Name 'BackgroundColorTextBox' -Value $window.FindName('BackgroundColorTextBox') -Scope 1 -Force
New-Variable -Name 'ButtonColorTextBox' -Value $window.FindName('ButtonColorTextBox') -Scope 1 -Force
New-Variable -Name 'BackgroundTextColorTextBox' -Value $window.FindName('BackgroundTextColorTextBox') -Scope 1 -Force
New-Variable -Name 'ButtonTextColorTextBox' -Value $window.FindName('ButtonTextColorTextBox') -Scope 1 -Force
New-Variable -Name 'ChtrServerTextBox' -Value $window.FindName('ChtrServerTextBox') -Scope 1 -Force
New-Variable -Name 'TWCServerTextBox' -Value $window.FindName('TWCServerTextBox') -Scope 1 -Force
New-Variable -Name 'LogOnServerLabelEdit' -Value $window.FindName('LogOnServerLabelEdit') -Scope 1 -Force
New-Variable -Name 'VersionLabel' -Value $window.FindName('VersionLabel') -Scope 1 -Force
New-Variable -Name 'PermissionsTextBox' -Value $window.FindName('PermissionsTextBox') -Scope 1 -Force	
New-Variable -Name 'OptimizeServerListButton' -Value $window.FindName('OptimizeServerListButton') -Scope 1 -Force	
New-Variable -Name 'SaveButton' -Value $window.FindName('SaveButton') -Scope 1 -Force	
New-Variable -Name 'UpdateButton' -Value $window.FindName('UpdateButton') -Scope 1 -Force	
New-Variable -Name 'ChangeLogButton' -Value $window.FindName('ChangeLogButton') -Scope 1 -Force
}

[System.Reflection.Assembly]::LoadWithPartialName("PresentationFramework") | Out-Null

function Import-Xaml {
	$BackgroundColorChoice = Get-Content "$env:userprofile\AppData\Local\CloudTools\Background.txt"
	$ButtonColorChoice = Get-Content "$env:userprofile\AppData\Local\CloudTools\Button.txt"
	$ButtonText = get-content "$env:userprofile\AppData\Local\CloudTools\ButtonText.txt"
	$BackgroundText = get-content "$env:userprofile\AppData\Local\CloudTools\BackgroundText.txt"
	$xaml = Invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/settingsmenu.txt" -usebasicparsing
	$xaml = $xaml.content
	$xaml = $xaml -replace "BackgroundColorVar","$BackgroundColorChoice"
	$xaml = $xaml -replace "ButtonColorVar","$ButtonColorChoice"
	$xaml = $xaml -replace "ButtonTextVar","$ButtonText"
	$xaml = $xaml -replace "BackgroundTextVar","$BackgroundText"
	[xml]$xaml = $xaml
	#[xml]$xaml = Get-Content -Path $PSScriptRoot\settings.xaml
	$manager = New-Object System.Xml.XmlNamespaceManager -ArgumentList $xaml.NameTable
	$manager.AddNamespace("x", "http://schemas.microsoft.com/winfx/2006/xaml");
	$xaml.SelectNodes("//*[@x:Name='OnTopCheckBox']", $manager)[0].RemoveAttribute('Checked')
	$xaml.SelectNodes("//*[@x:Name='CompactModeCheckBox']", $manager)[0].RemoveAttribute('Checked')
	$xaml.SelectNodes("//*[@x:Name='OpenOnStartupCheckBox']", $manager)[0].RemoveAttribute('Checked')
	$xaml.SelectNodes("//*[@x:Name='SaveButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='UpdateButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='ChangeLogButton']", $manager)[0].RemoveAttribute('Click')
	$xamlReader = New-Object System.Xml.XmlNodeReader $xaml
	[Windows.Markup.XamlReader]::Load($xamlReader)
}

function Set-EventHandler {
	$SaveButton.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		SaveButtonClick -sender $sender -e $e
	})
	$UpdateButton.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		UpdateButton -sender $sender -e $e
	})
	$ChangeLogButton.add_Click({
		param([System.Object]$sender,[System.Windows.RoutedEventArgs]$e)
		ChangeLogButtonClick -sender $sender -e $e
	})
}

$window = Import-Xaml
Add-ControlVariables
Set-EventHandler

# initilize variables and set fields for the gui based of existing config files

$ontop = get-content "$env:userprofile\AppData\Local\CloudTools\ontop.txt"
if($ontop -eq 1){
	$OnTopCheckBox.ischecked = $true
}
$compact = get-content "$env:userprofile\AppData\Local\CloudTools\mode.txt"
if($compact -eq "1"){
	$CompactModeCheckBox.ischecked = $true
}
if(test-path "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ITSD Pro Tools (Cloud).lnk"){
	# file exists in startup folder
	$OpenOnStartupCheckBox.ischecked = $true
}

# swap the below assignments with get content commands from the config files

$bgcolor = get-content "$env:userprofile\AppData\Local\CloudTools\Background.txt"
$fgcolor = get-content "$env:userprofile\AppData\Local\CloudTools\Button.txt"
$bgtcolor = get-content "$env:userprofile\AppData\Local\CloudTools\BackgroundText.txt"
$fgtcolor = Get-Content "$env:userprofile\AppData\Local\CloudTools\ButtonText.txt"
$chtrserverint = get-content "$env:userprofile\AppData\Local\CloudTools\chtrdc.txt"
$chtrserverint = $chtrserverint.ToLower()
$twcserverint = get-content "$env:userprofile\AppData\Local\CloudTools\twcdc.txt"
$twcserverint = $twcserverint.ToLower()
$logonserver = $env:LOGONSERVER
$versionnum = invoke-webrequest -uri "https://raw.githubusercontent.com/ChrisSalProTools/ProToolsUpdateNotiChecker/main/version.txt"
$versionnum = $versionnum.content
$version = "ITSD Pro Tools Version " + "$versionnum"
$perms = get-content "$env:userprofile\AppData\Local\CloudTools\permissions.txt" -raw


$BackgroundColorTextBox.text = $bgcolor
$ButtonColorTextBox.text = $fgcolor
$BackgroundTextColorTextBox.text = $bgtcolor
$ButtonTextColorTextBox.text = $fgtcolor
$ChtrServerTextBox.text = $chtrserverint
$TWCServerTextBox.text = $twcserverint
$LogOnServerLabelEdit.content = $logonserver
$VersionLabel.content = $version
$PermissionsTextBox.text = $perms

function SaveButtonClick
{
	param($sender, $e)
	#$window.hide()
	if($OnTopCheckBox.ischecked){
		#make it always be on top
		$testontopconfig = get-content "$env:userprofile\AppData\Local\CloudTools\ontop.txt"
		if($testontopconfig -ne 1){
			"1" > "$env:userprofile\AppData\Local\CloudTools\ontop.txt"
		}
	}else{
		$testontopconfig = get-content "$env:userprofile\AppData\Local\CloudTools\ontop.txt"
		if($testontopconfig -ne 0){
			"0" > "$env:userprofile\AppData\Local\CloudTools\ontop.txt"
		}
	}

	if($CompactModeCheckBox.ischecked){
		#make it use compact mode
		$testcompatconfig = get-content "$env:userprofile\AppData\Local\CloudTools\mode.txt"
		if($testcompatconfig -ne 1){
			"1" > "$env:userprofile\AppData\Local\CloudTools\mode.txt"
		}
	}else{
		$testcompatconfig = get-content "$env:userprofile\AppData\Local\CloudTools\mode.txt"
		if($testcompatconfig -ne 0){
			"0" > "$env:userprofile\AppData\Local\CloudTools\mode.txt"
	}
}

	if($OpenOnStartupCheckBox.ischecked){
		#make the tool open on startup
		if(test-path "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ITSD Pro Tools (Cloud).lnk"){
			# file exists in startup folder
		}else{
			# file does not exist in startup folder - fix this here
			# this is the section where it would actually build a script to open on startup
			copy-item "C:\ITSDProTools\CloudTools\ITSD Pro Tools (Cloud).lnk" "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
		}
	}else{
		if(test-path "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ITSD Pro Tools (Cloud).lnk"){
			rm "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ITSD Pro Tools (Cloud).lnk"
		}
	}
	$chtrserver = $ChtrServerTextBox.text
	$twcserver = $TWCServerTextBox.text
	$backgroundText = $BackgroundTextColorTextBox.text
	$background = $BackgroundColorTextBox.text
	$buttonText = $ButtonTextColorTextBox.text
	$button = $ButtonColorTextBox.text
	$newperms = $PermissionsTextBox.text

	if($button -ne $fgcolor){
		$button > "$env:userprofile\AppData\Local\CloudTools\Button.txt"
	}
	if($background -ne $bgcolor){
		$background > "$env:userprofile\AppData\Local\CloudTools\Background.txt"
	}
	if($backgroundText -ne $bgtcolor){
		$BackgroundText > "$env:userprofile\AppData\Local\CloudTools\BackgroundText.txt"
	}
	if($buttonText -ne $fgtcolor){
		$buttonText > "$env:userprofile\AppData\Local\CloudTools\ButtonText.txt"
	}
	if($chtrserver -ne $chtrserverint){
		$chtrserver > "$env:userprofile\AppData\Local\CloudTools\chtrdc.txt"
	}
	if($twcserver -ne $twcserverint){
		$twcserver > "$env:userprofile\AppData\Local\CloudTools\twcdc.txt"
	}
	if($newperms -ne $perms){
		$newperms > "$env:userprofile\AppData\Local\CloudTools\permissions.txt"
	}

	exit
}


function UpdateButton
{
	param($sender, $e)
	# useless button as it will be updated next time you run the tool - but let's make it relaunch the tool anyway.
  start-process powershell.exe -argumentlist '$run = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/CloudTools.txt" -usebasicparsing; $run = $run.content; invoke-expression $run'; exit
}


function ChangeLogButtonClick
{
	param($sender, $e)
	remove-item "$env:userprofile\Downloads\index.html";
  # change the blank notes to a invoke web request of the notes.
	$changelognotes = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/changelog.txt" -usebasicparsing
	$changelognotes = $changelognotes.content
	$changelognotes = $changelognotes -replace "`r`n`r`n","</p><p>"; $changelognotes = $changelognotes -replace "`r`n","<br>"; 
  
  # change the get-content to an invoke web request for the index file.
  $templatefile = invoke-webrequest "https://raw.githubusercontent.com/ChrisSalProTools/CloudTools/main/template.txt" -usebasicparsing
  $templatefile = $templatefile.content
  
  
  Add-content "$env:userprofile\Downloads\index.html" "$templatefile"; add-content "$env:userprofile\Downloads\index.html" "$changelognotes"; Add-content "$env:userprofile\Downloads\index.html" "</div></body></html>";
	start-process $env:userprofile\Downloads\index.html
}

$ontoptest = get-content $env:userprofile\AppData\Local\CloudTools\ontop.txt

if ($ontoptest -eq 1){
$window.topmost="True"
}
$window.ShowDialog()
